USE [FAHESVIS]
GO
/****** Object:  UserDefinedFunction [dbo].[GetRegisteredVehicleCountByTime]    Script Date: 5/21/2024 10:23:00 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- =============================================
-- Author:		<Salem Nofal>
-- Create date: <13-05-2024>
-- Description:	< to get The Register Vehicle  Based on date and start time and end time >
-- =============================================
create FUNCTION [dbo].[GetRegisteredVehicleCountByTime] (
    @Date DATE,
    @StartTime TIME,
    @EndTime TIME,
	@VType Int
)
RETURNS INT
AS
BEGIN
    DECLARE @StartDate DATETIME = DATEADD(SECOND, DATEDIFF(SECOND, 0, @StartTime), CONVERT(DATETIME, @Date));
    DECLARE @EndDate DATETIME = DATEADD(SECOND, DATEDIFF(SECOND, 0, @EndTime), CONVERT(DATETIME, @Date));

    RETURN (
        SELECT COUNT(*)
        FROM dbo.Register_Vehicle
        WHERE CREATED_DATE >= @StartDate
        AND CREATED_DATE <=  @EndDate
		and exists(select 1 from dbo.Vehicle_Categories
		inner join Vehicles_Category_Types on Vehicles_Category_Types.Type_Id = Vehicle_Categories.Category_Type_Id and Vehicles_Category_Types.Type_Id =@VType
		where dbo.Register_Vehicle.Category_Id =dbo.Vehicle_Categories.Category_Id)
    );
END;




//////////////////////////////////////////////////////////////////////////



 create PROCEDURE [dbo].[SP_AppAdmin_InspectionServiceCategoryDML]
    @OperationType NVARCHAR(10), -- 'INSERT', 'UPDATE', or 'DELETE'
    @Service_Id INT = NULL,
    @Category_Id INT = NULL,
    @Status INT = NULL,
    @Created_By INT = NULL, 
    @Updated_By INT = NULL, 
    @Result INT OUTPUT,
    @Error_Message NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRANSACTION; -- Start the transaction

    BEGIN TRY
        IF @OperationType = 'INSERT'
        BEGIN
            INSERT INTO Inspection_Service_Category
            (
                Service_Id,
				Category_Id,
                Status,
                Created_By,
                Created_Date 
            )
            VALUES
            (
                @Service_Id,
				@Category_Id,
                @Status,
                @Created_By,
                 GETDATE()
            );

            SET @Result = @@ROWCOUNT;
        END
        ELSE IF @OperationType = 'UPDATE'
        BEGIN
            IF EXISTS (SELECT 1 FROM Inspection_Service_Category WHERE Service_Id = @Service_Id AND Category_Id = @Category_Id)
        -- Perform the update
        UPDATE Inspection_Service_Category
        SET
            Status = @Status,
            Updated_By = @Updated_By,
            Updated_Date = GETDATE()
        WHERE
            Service_Id = @Service_Id AND Category_Id = @Category_Id;

            SET @Result = @@ROWCOUNT;
        END
        ELSE IF @OperationType = 'DELETE'
        BEGIN
            DELETE FROM Inspection_Service_Category
            WHERE
                Service_Id = @Service_Id
				and Category_Id = @Category_Id;

            SET @Result = @@ROWCOUNT;
        END
        ELSE
        BEGIN
            SET @Error_Message = 'Invalid operation type!';
            ROLLBACK; -- Rollback the transaction in case of an error
            RETURN;
        END
    END TRY

    BEGIN CATCH
       DECLARE @ErrorNumber INT = ERROR_NUMBER();

        -- Call the function to get the custom error message
        SET @Error_Message = dbo.fn_Core_GetCustomErrorMessage(@ErrorNumber);
        ROLLBACK; -- Rollback the transaction in case of an error
        RETURN;
    END CATCH;

    COMMIT; -- Commit the transaction if everything is successful
END;


//////////////////////////////////////////////////////////////////////////


 create PROCEDURE [dbo].[SP_AppAdmin_StationServicesDML]
    @OperationType NVARCHAR(10), -- 'INSERT', 'UPDATE', or 'DELETE'
    @Station_Id INT = NULL,
    @Service_Type_Id INT = NULL,
    @Is_Active BIT = NULL,
    @Created_By INT = NULL, 
    @Updated_By INT = NULL, 
    @Result INT OUTPUT,
    @Error_Message NVARCHAR(MAX) OUTPUT
AS
BEGIN
    BEGIN TRANSACTION; -- Start the transaction

    BEGIN TRY
        IF @OperationType = 'INSERT'
        BEGIN
            INSERT INTO [dbo].[Station_Services]
            (
                Station_Id,
                Service_Type_Id,
                Is_Active,
                Created_By,
                Created_Date
            )
            VALUES
            (
                @Station_Id,
                @Service_Type_Id,
                @Is_Active,
                @Created_By,
                GETDATE()
            );

            SET @Result = @@ROWCOUNT;
        END
        ELSE IF @OperationType = 'UPDATE'
        BEGIN
            IF EXISTS (SELECT 1 FROM [dbo].[Station_Services] WHERE Station_Id = @Station_Id AND Service_Type_Id = @Service_Type_Id)
            BEGIN
                -- Perform the update
                UPDATE [dbo].[Station_Services]
                SET
                    Is_Active = @Is_Active,
                    Updated_By = @Updated_By,
                    Updated_Date = GETDATE()
                WHERE
                    Station_Id = @Station_Id AND Service_Type_Id = @Service_Type_Id;

                SET @Result = @@ROWCOUNT;
            END
            ELSE
            BEGIN
                SET @Error_Message = 'Record not found!';
                ROLLBACK; -- Rollback the transaction in case of an error
                RETURN;
            END
        END
        ELSE IF @OperationType = 'DELETE'
        BEGIN
            DELETE FROM [dbo].[Station_Services]
            WHERE
                Station_Id = @Station_Id
                AND Service_Type_Id = @Service_Type_Id;

            SET @Result = @@ROWCOUNT;
        END
        ELSE
        BEGIN
            SET @Error_Message = 'Invalid operation type!';
            ROLLBACK; -- Rollback the transaction in case of an error
            RETURN;
        END
    END TRY

    BEGIN CATCH
        DECLARE @ErrorNumber INT = ERROR_NUMBER();
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();

        -- Log the error message
        SET @Error_Message = @ErrorMessage;
        ROLLBACK; -- Rollback the transaction in case of an error
        RETURN;
    END CATCH;

    COMMIT; -- Commit the transaction if everything is successful
END;
